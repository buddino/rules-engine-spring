package it.unifi.dinfo.rulesengine.rules;

import com.fasterxml.jackson.databind.ObjectMapper;
import it.unifi.dinfo.rulesengine.configuration.ContextProvider;
import it.unifi.dinfo.rulesengine.notification.GAIANotification;
import it.unifi.dinfo.rulesengine.notification.amqp.SenderService;
import it.unifi.dinfo.rulesengine.notification.websocket.WSController;
import it.unifi.dinfo.rulesengine.service.MeasurementRepository;
import org.apache.log4j.Logger;
import org.easyrules.annotation.Action;
import org.easyrules.annotation.Condition;
import org.easyrules.annotation.Rule;
import org.mapdb.DB;
import org.mapdb.HTreeMap;
import org.mapdb.Serializer;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;


@Rule
public class ExploitNaturalLight extends GaiaRule{
    Logger LOGGER = Logger.getLogger(this.getClass());
    Long exceedings = 0L;

    public Long getExceedingsThreshold() {
        return exceedingsThreshold;
    }

    public void setExceedingsThreshold(Long exceedingsThreshold) {
        this.exceedingsThreshold = exceedingsThreshold;
    }

    Long exceedingsThreshold = 3L;

    HTreeMap<String, Long>  exceedingsMap = embeddedDB.hashMap("exeedings", Serializer.STRING, Serializer.LONG).open();
    @Condition
    public boolean condition() {
        exceedings = exceedingsMap.get("gaia-prato/gw1/weather/light");
        return exceedings > exceedingsThreshold;
    }

    @Action
    public void action() {
        exceedingsMap.put("gaia-prato/gw1/weather/light", 0L);
        LOGGER.info(String.format("Exceedings (%d) greater than threshold (%d)", exceedings, exceedingsThreshold));
        GAIANotification notification = new GAIANotification();
        notification.setTimestamp(new Date().getTime());
        notification.setRule(this.getClass().getSimpleName());
        notification.setDescription(String.format("Exceedings (%d) greater than threshold (%d)", exceedings, exceedingsThreshold));
        Map<String,Double> map = new HashMap<>();
        map.put("Light",measurementRepository.getLatestFor("gaia-prato/gw1/weather/light").getReading());
        map.put("Power (kW)",measurementRepository.getLatestFor("gaia-prato/gw1/QG/Lighting/actpw").getReading()/1000000);
        notification.setValues(map);
        websocket.pushNotification(notification);
        eventLogger.addEvent(notification);
        //amqpSenderService.sendNotification(notification);
    }
}
